---
import IconRenderer from "./IconRenderer.astro";
import { ChevronRight } from "@lucide/astro";
import content from "../data/caliptra-content.json";
const { section = content.sections[0] } = Astro.props;
---

<section class="section" id={section.id}>
  <div class={`container two-columns ${section.reverse ? "reverse" : ""}`}>
    <div class="text-content animate-on-scroll">
      {section.tag && <div class="section-tag animate-item">{section.tag}</div>}
      <h2 class="animate-item">{section.title}</h2>

      {section.paragraphs?.map((paragraph) => <p class="animate-item">{paragraph}</p>)}

      {
        section.listItems && section.listItems.length > 0 && (
          <ul class="feature-list">
            {section.listItems.map((item, index) => (
              <li class="feature-item animate-item" style={`animation-delay: ${0.1 + index * 0.1}s`}>
                {item.url ? (
                  <a href={item.url} target="_blank" rel="noopener" class="item-link">
                    <div class="list-icon-wrapper">
                      <IconRenderer name={item.icon} size={16} />
                    </div>
                    <span>{item.text}</span>
                    <ChevronRight size={14} />
                  </a>
                ) : (
                  <>
                    <div class="list-icon-wrapper">
                      <IconRenderer name={item.icon} size={16} />
                    </div>
                    <span>{item.text}</span>
                  </>
                )}
              </li>
            ))}
          </ul>
        )
      }

      {
        section.buttons && section.buttons.length > 0 && (
          <div class="section-buttons">
            {section.buttons.map((button, index) => (
              <a 
                href={button.url} 
                class={`btn ${button.primary ? "btn-primary" : "btn-outline"} animate-item`}
                style={`animation-delay: ${0.3 + index * 0.1}s`}
              >
                {button.text}
              </a>
            ))}
          </div>
        )
      }
    </div>
    <img 
      src={section.image || "./images/home/item.svg"} 
      class="image-placeholder animate-on-scroll" 
      alt={section.title}
    />
  </div>
</section>

<style>
  /* Section styling */
  .text-content {
    padding: 2rem 0;
  }

  /* Lists and features */
  .feature-list {
    list-style: none;
    padding: 0;
    margin: 1.5rem 0;
  }
  .feature-item {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.875rem;
  }
  .list-icon-wrapper {
    background: #f5f5f7;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--accent-primary);
  }

  .item-link {
    color: var(--accent-primary);
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }

  .item-link:hover {
    text-decoration: underline;
  }

  /* Buttons */
  .section-buttons {
    display: flex;
    gap: 1rem;
    width: max-content;
    margin-top: 2rem;
  }

  /* Image */
  .image-placeholder {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .two-columns {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .text-content {
      order: 2 !important;
      padding: 1rem 0;
    }
    
    .image-placeholder {
      order: 1 !important;
    }
    
    .section-buttons {
      flex-direction: row;
      flex-wrap: wrap;
    }
    
    .section {
      padding: 3rem 0;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const animateOnScrollElements = document.querySelectorAll('.animate-on-scroll');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          requestAnimationFrame(() => {
            entry.target.classList.add('in-view');
          });
          observer.unobserve(entry.target);
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    animateOnScrollElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>
