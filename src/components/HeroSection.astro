---
import { ChevronRight } from "@lucide/astro";
import content from "../data/caliptra-content.json";

const { hero } = content;
const words = hero.title.split(" ");
const animatedTitle = words.map((word, index) => {
  const delay = index;
  const delayClass = delay <= 15 ? `word-animation-delay-${delay}` : `word-animation-delay-15`;
  return `<span class="word-animation ${delayClass}">${word}</span>`;
}).join(" ");
---

<head>
  <link rel="preload" href="./images/home/hero-video.mp4" as="video" fetchpriority="high" />
</head>

<section class="hero">
  <div class="container">
    <div class="hero-content animate-on-scroll">
      <h1 class="animate-item" set:html={animatedTitle} />
      <p class="hero-description animate-item">{hero.description}</p>
      <div class="cta-buttons animate-item">
        <a href="./docs.html" class="btn btn-primary">Get Started <ChevronRight size={14} /></a>
        <a href="https://github.com/chipsalliance/Caliptra">GitHub <ChevronRight size={14} /></a>
      </div>
    </div>
    <div class="hero-video animate-on-scroll">
      <video
        src="./images/home/hero-video.mp4"
        class="hero-image"
        width="1200"
        height="484"
        autoplay
        muted
        loop
      >
        Your browser does not support the video tag.
      </video>
    </div>
  </div>
</section>

<style>
  .hero {
    padding: 6rem 0;
    text-align: left;
  }

  .hero h1 {
    font-size: 3rem;
    margin-bottom: 1rem;
    line-height: 1.3;
  }

  .hero-description {
    margin-bottom: 1.5rem;
    line-height: 1.6;
  }

  .hero-image {
    width: 100%;
    aspect-ratio: 2.48 / 1;
    max-height: 500px;
    background: #e5e5ea;
    margin-top: 4rem;
    border-radius: 8px;
    object-fit: cover;
    transform: translateY(0);
    opacity: 1;
  }

  .cta-buttons {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  @media (max-width: 768px) {
    .hero {
      padding: 3rem 0;
      text-align: left;
    }

    .hero-image {
      margin-top: 2rem;
    }

    .cta-buttons {
      flex-direction: row;
      flex-wrap: wrap;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .hero h1 {
      font-size: 2.5rem;
    }
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('in-view');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.3 });

    document.querySelectorAll('.animate-on-scroll').forEach(el => observer.observe(el));
  });
</script>
